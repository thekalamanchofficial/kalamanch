generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String           @id @default(auto()) @map("_id") @db.ObjectId
  email                   String           @unique
  name                    String
  profile                  String?
  birthdate               DateTime?
  interests               String[]
  bio                     String?
  education               String[]         @default([])
  professionalCredentials String           @default("")
  following               String[]         @db.ObjectId
  followers               String[]         @db.ObjectId
  bookmarks               String[]         @db.ObjectId
  usersToFollow           AuthorInfo[]
  likes                   Like[]
  comments                Comment[]
  bids                    Bid[]
  posts                   Post[]
}

model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String   @db.ObjectId
  authorName    String
  authorProfileImageUrl  String?
  content       String
  postDetails   PostDetails
  likeCount     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  author       User           @relation(fields: [authorId], references: [id])
  likes        Like[]
  comments     Comment[]
  bids         Bid[]
  isFeatured   Boolean    @default(false)

  @@index([authorId])
  @@index([tags])
  @@index([createdAt])
  @@index([isFeatured])

}

type ThumbnailDetails {
  url     String
  content String?
  title   String?
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  parentId  String?  @db.ObjectId
  userName  String
  userProfileImageUrl  String?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  amount    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

enum PostType {
  ARTICLE
  VIDEO
  PODCAST
}

type PostDetails {
  title          String
  targetAudience String[]
  postType       PostType
  actors         String[]     @default([])
  tags           String[]
  thumbnailDetails  ThumbnailDetails
}

model Iterations {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  iterationName String
  content       String
  draftPostId   String     @db.ObjectId
  DraftPost     DraftPost  @relation(fields: [draftPostId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model DraftPost {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String       @db.ObjectId
  authorName    String
  authorProfileImageUrl  String?
  postDetails   PostDetails
  iterations    Iterations[] 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([authorId])
}


type AuthorInfo {
  id            String   @db.ObjectId
  name          String
  profileImageUrl  String?
}

