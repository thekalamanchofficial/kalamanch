generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                      @id @default(auto()) @map("_id") @db.ObjectId
  email                   String                      @unique
  name                    String
  profileImageUrl         String
  coverImageUrl           String?
  birthdate               DateTime?
  readingInterests        Interests
  writingInterests        Interests
  bio                     String?
  education               String[]                    @default([])
  following               String[]                    @db.ObjectId
  followers               String[]                    @db.ObjectId
  bookmarks               String[]                    @db.ObjectId
  usersToFollow           UserToFollow[]
  likes                   Like[]
  comments                Comment[]
  bids                    Bid[]
  posts                   Post[]
  requestedReviews        DraftPostIterationReviews[] @relation("RequesterRelation")
  draftsToReview          DraftPostIterationReviews[] @relation("ReviewerRelation")
}

type Interests {
  genres String[] @default([])
  tags   String[] @default([])
}

model Post {
  id                    String           @id @default(auto()) @map("_id") @db.ObjectId
  authorId              String           @db.ObjectId
  authorName            String
  authorProfileImageUrl String
  content               String
  title                 String
  postTypeId            String?          @db.ObjectId
  postType              PostType?        @relation(fields: [postTypeId], references: [id])
  actors                String[]         @default([])
  thumbnailDetails      ThumbnailDetails
  likeCount             Int              @default(0)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  author     User      @relation(fields: [authorId], references: [id])
  likes      Like[]
  comments   Comment[]
  bids       Bid[]
  isFeatured Boolean   @default(false)

  genreIds String[] @db.ObjectId
  tagIds   String[] @db.ObjectId
  genres   Genre[]  @relation(fields: [genreIds], references: [id])
  tags     Tag[]    @relation(fields: [tagIds], references: [id])

  @@index([authorId])
  @@index([createdAt])
  @@index([isFeatured])
}

type ThumbnailDetails {
  url     String
  content String?
  title   String?
}

model Like {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  postId      String?    @db.ObjectId
  iterationId String?    @db.ObjectId
  postStatus  PostStatus @default(PUBLISHED)
  userId      String     @db.ObjectId
  createdAt   DateTime   @default(now())

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  iteration Iterations? @relation(fields: [iterationId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([iterationId])
  @@index([userId])
}

model Comment {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  postId              String?    @db.ObjectId
  iterationId         String?    @db.ObjectId
  postStatus          PostStatus @default(PUBLISHED)
  userId              String     @db.ObjectId
  parentId            String?    @db.ObjectId
  userName            String
  userProfileImageUrl String
  content             String
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  iteration Iterations? @relation(fields: [iterationId], references: [id], onDelete: Cascade)
  parent    Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[]   @relation("CommentReplies")

  @@index([postId])
  @@index([iterationId])
  @@index([userId])
  @@index([parentId])
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  amount    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model UserToFollow {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @db.ObjectId
  name            String
  profileImageUrl String
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Iterations {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  iterationName String
  content       String
  draftPostId   String    @db.ObjectId
  draftPost     DraftPost @relation(fields: [draftPostId], references: [id], onDelete: Cascade)
  likeCount     Int       @default(0)

  likes     Like[]
  comments  Comment[]
  reviewers DraftPostIterationReviews[]
  createdAt DateTime                    @default(now())
  updatedAt DateTime                    @updatedAt
}

model DraftPost {
  id                    String       @id @default(auto()) @map("_id") @db.ObjectId
  authorId              String       @db.ObjectId
  authorName            String
  authorProfileImageUrl String
  title                 String
  iterations            Iterations[]
  likeCount             Int          @default(0)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  @@index([authorId])
}

model DraftPostIterationReviews {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  iterationId String @db.ObjectId
  reviewerId  String @db.ObjectId
  requesterId String @db.ObjectId

  requester User       @relation("RequesterRelation", fields: [requesterId], references: [id], onDelete: Cascade)
  reviewer  User       @relation("ReviewerRelation", fields: [reviewerId], references: [id], onDelete: Cascade)
  iteration Iterations @relation(fields: [iterationId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())

  @@unique([iterationId, reviewerId])
  @@index([iterationId])
  @@index([reviewerId])
  @@index([requesterId])
}

model Genre {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  tagIds  String[] @db.ObjectId
  tags    Tag[]    @relation(fields: [tagIds], references: [id])
  postIds String[] @db.ObjectId
  posts   Post[]   @relation(fields: [postIds], references: [id])
}

model Tag {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  genreIds String[] @db.ObjectId
  genres   Genre[]  @relation(fields: [genreIds], references: [id])
  postIds  String[] @db.ObjectId
  posts    Post[]   @relation(fields: [postIds], references: [id])
}

model PostType {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  posts Post[]
}
