generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  email          String           @unique
  name           String
  birthdate      DateTime
  profile        String?
  interests      String[]
  likes          Like[]
  comments       Comment[]
  bids           Bid[]
  posts          Post[]
  following      String[]         @db.ObjectId
  bookmarks      String[]         @db.ObjectId
  FeaturedAuthor FeaturedAuthor[]
}

model Post {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String   @db.ObjectId
  authorName    String
  authorProfile String
  title         String
  content       String
  media         Media
  tags          String[]
  likeCount     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  author       User           @relation(fields: [authorId], references: [id])
  likes        Like[]
  comments     Comment[]
  bids         Bid[]
  FeaturedPost FeaturedPost[]

  @@index([tags])
  @@index([createdAt])
}

type Media {
  thumbnailPicture String[]
  thumbnailContent String
  thumbnailTitle   String
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  parentId  String?  @db.ObjectId
  name      String
  profile   String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model Bid {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  userId    String   @db.ObjectId
  amount    Int
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model FeaturedPost {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  postId        String @unique @db.ObjectId
  title         String
  authorName    String
  authorProfile String
  authorId      String @db.ObjectId

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model FeaturedAuthor {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  name    String
  profile String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
